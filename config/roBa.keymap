#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        kzk_mail: to_layer_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp K>,
                <&macro_tap>,
                <&kp K &kp Z &kp K &kp DOT &kp M &kp K &kp A &kp K &kp AT_SIGN &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;

            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&kzk_mail>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E               &kp R                    &kp T                                                 &kp Y             &kp U  &kp I      &kp O    &kp DEL
&kp A             &kp S         &lt 5 D             &kp F                    &kp G                 &lt 6 TAB      &mkp MB1         &kp H             &kp J  &lt 5 K    &kp L    &kp P
&mt LEFT_SHIFT Z  &kp X         &kp C               &kp V                    &kp B                 &lt 6 TAB      &lt 4 TAB        &kp N             &kp M  &kp COMMA  &kp DOT  &kp ENTER
&kp LCTRL         &kp LEFT_ALT  &kp LG(LEFT_SHIFT)  &mt LEFT_GUI LANGUAGE_2  &mt LEFT_SHIFT SPACE  &mkp MB1       &lt 2 BACKSPACE  &lt 1 LANGUAGE_1                             &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp LA(LC(A))          &kp LC(LA(LEFT_ARROW))  &kp LC(LA(ENTER))  &kp LC(LA(RIGHT))  &kp LC(LA(D))                          &kp KP_N0  &kp KP_N1  &kp KP_N2  &kp KP_N3  &trans
&kp LG(LEFT_BRACKET)   &kp TAB                 &kp LC(LA(E))      &kp LC(LA(T))      &kp LG(LS(EQUAL))  &trans      &trans  &trans     &kp KP_N4  &kp KP_N5  &kp KP_N6  &trans
&kp LG(RIGHT_BRACKET)  &kp LS(TAB)             &kp LS(LC(TAB))    &kp LC(TAB)        &kp LG(MINUS)      &trans      &trans  &trans     &kp KP_N7  &kp KP_N8  &kp KP_N9  &trans
&trans                 &trans                  &trans             &trans             &trans             &trans      &trans  &trans                                      &trans
            >;
        };

        NUM {
            bindings = <
&kp EXCLAMATION  &kp AT     &kp HASH   &kp DOLLAR         &kp PERCENT                                               &kp CARET  &kp AMPERSAND  &kp ASTRK         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp QMARK        &kp TILDE  &kp SEMI   &kp SINGLE_QUOTE   &kp GRAVE    &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp PLUS   &kp MINUS      &kp EQUAL         &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)
&kp BACKSLASH    &kp PIPE   &kp COLON  &kp DOUBLE_QUOTES  &kp SLASH    &kp EQUAL                    &trans          &kp UNDER  &kp LESS_THAN  &kp GREATER_THAN  &kp LEFT_BRACKET      &kp RIGHT_BRACKET
&trans           &trans     &trans     &trans             &trans       &trans                       &trans          &trans                                                            &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&kp ESCAPE  &kp LG(LEFT)        &kp LG(RIGHT)  &kp LG(LS(KP_N3))  &kp LG(LS(NUMBER_4))                                     &kp LC(LEFT)  &kp LC(RIGHT)           &trans          &kp LC(UP_ARROW)         &kp ESCAPE
&trans      &kp LC(LEFT_SHIFT)  &trans         &kp LEFT_ALT       &kp LS(LG(N4))        &trans                  &trans     &trans        &kp LG(LC(LEFT_ARROW))  &kp UP_ARROW    &kp LG(LC(RIGHT_ARROW))  &kp LC(K)
&kzk_mail   &trans              &trans         &trans             &trans                &trans                  &trans     &trans        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &trans
&trans      &trans              &trans         &trans             &trans                &kp LG(LEFT_SHIFT)      &mkp LCLK  &mkp RCLK                                                                      &trans
            >;
        };

        layer_6 {
            bindings = <
&kp C_VOLUME_UP  &kp K_VOLUME_UP  &trans        &kp K_VOLUME_DOWN  &kp C_VOLUME_DOWN                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans           &trans           &trans        &trans             &trans             &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans           &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3       &trans             &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans           &trans           &trans        &trans             &trans             &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
